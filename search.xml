<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>哈喽~欢迎来到我的博客🎊🎊🎊</title>
    <url>/2023/11/08/%E6%B4%9B%E8%B0%B7%E5%88%B7%E9%A2%98%E6%83%85%E5%86%B5/</url>
    <content><![CDATA[<p><img src="https://api.xecades.xyz/api?bg=0,0,0,0.66&img=1&color=250,247,247,1&quote=Hold+On~~&github=ArronHC&luogu=Arron_HC"></p>
<p><img src="https://luogu.wao3.cn/api/practice?id=110559&dark_mode=true" alt="我的练习情况"></p>
]]></content>
  </entry>
  <entry>
    <title>全排列</title>
    <url>/2023/10/31/%E5%85%A8%E6%8E%92%E5%88%97/</url>
    <content><![CDATA[<h2 id="P1706-全排列问题"><a href="#P1706-全排列问题" class="headerlink" title="P1706 全排列问题"></a><a href="https://www.luogu.com.cn/problem/P1706">P1706 全排列问题</a></h2><p>终于要写c++的博客了~近期从搜索入手，将暴力算法+剪枝掌握熟练</p>
<p>对于全排列问题，我们使用dfs，将搜索的当前状态设定为当前位置，通过遍历1~n，若该数没有被使用过，便将该数填入，然后寻找下一位，直到n+1位跳出递归。</p>
<p>由此，我们可以大概抽象出dfs的基本步骤：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(当前状态)</span></span>&#123;</span><br><span class="line">    终止条件</span><br><span class="line"></span><br><span class="line">    对于当前状态进行遍历，寻找下一可行状态</span><br><span class="line">    改变下一状态相关参数</span><br><span class="line">    <span class="built_in">dfs</span>(下一状态)</span><br><span class="line">    恢复“下一状态”（时则为本次状态）原样</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="代码实现："><a href="#代码实现：" class="headerlink" title="代码实现："></a>代码实现：</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> a[<span class="number">20</span>],flag[<span class="number">20</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> cur)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(cur==n+<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) cout&lt;&lt;<span class="built_in">setw</span>(<span class="number">5</span>)&lt;&lt;a[i];</span><br><span class="line">        cout&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(flag[i]==<span class="number">0</span>)&#123;</span><br><span class="line">            a[cur]=i;</span><br><span class="line">            flag[i]=<span class="number">1</span>;</span><br><span class="line">            <span class="built_in">dfs</span>(cur+<span class="number">1</span>);</span><br><span class="line">            a[cur]=<span class="number">0</span>;</span><br><span class="line">            flag[i]=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>c++练习</category>
      </categories>
      <tags>
        <tag>洛谷习题</tag>
        <tag>递归</tag>
      </tags>
  </entry>
  <entry>
    <title>IFS</title>
    <url>/2023/10/31/%E8%BF%AD%E4%BB%A3%E5%88%86%E5%BD%A2%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<p><img title="" src="https://i0.imgs.ovh/2023/10/31/ABTL2.gif" alt="" width="194" data-align="inline"><img title="" src="https://i0.imgs.ovh/2023/10/29/AX64d.png" alt="" width="163"><img title="" src="https://i0.imgs.ovh/2023/10/31/AByDv.gif" alt="" width="198"></p>
<span id="more"></span>

<h2 id="什么是IFS？"><a href="#什么是IFS？" class="headerlink" title="什么是IFS？"></a>什么是IFS？</h2><p>IFS(Iterated Function System)迭代函数系统，可以通过迭代来创造出分形图案</p>
<h2 id="什么是分形图案？"><a href="#什么是分形图案？" class="headerlink" title="什么是分形图案？"></a>什么是分形图案？</h2><p>分形图案：力图通过数学方法，来创造自相似的图案（例如树叶等）</p>
<hr>
<p>下面，我们通过三类例子来深入探索IFS的世界：</p>
<h3 id="1-单一常量"><a href="#1-单一常量" class="headerlink" title="1.单一常量"></a>1.单一常量</h3><p><img src="https://i0.imgs.ovh/2023/10/31/ABDjK.png"></p>
<p>代码实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">generate</span><span class="params">(Graphics g)</span>&#123;</span><br><span class="line">        <span class="type">double</span> x=<span class="number">0</span>,y=<span class="number">0</span>;</span><br><span class="line">        <span class="type">double</span> tx,ty;</span><br><span class="line">        <span class="type">double</span> a=-<span class="number">1.8</span>,b=-<span class="number">2.0</span>,c=-<span class="number">0.5</span>,d=-<span class="number">0.9</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">500000</span>; i++) &#123;</span><br><span class="line">            tx=Math.sin(a*y)+c*Math.cos(a*x);</span><br><span class="line">            ty=Math.sin(b*x)+d*Math.cos(b*y);</span><br><span class="line">            <span class="type">int</span> px=(<span class="type">int</span>)(tx*<span class="number">100</span>)+<span class="number">400</span>;</span><br><span class="line">            <span class="type">int</span> py=(<span class="type">int</span>)(ty*<span class="number">100</span>)+<span class="number">400</span>;</span><br><span class="line">            g.drawLine(px,py,px,py);</span><br><span class="line">            x=tx;</span><br><span class="line">            y=ty;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>在这里，我们通过放大坐标，使图像能够正常显示</p>
<p><strong>一定要注意类型转换问题！！</strong></p>
<p>生成效果：</p>
<p><img title="" src="https://i0.imgs.ovh/2023/11/04/Zxzie.png" alt="" width="357" data-align="center"><img title="" src="https://i0.imgs.ovh/2023/11/04/Zx87o.png" alt="" width="315" data-align="center"></p>
<p>不过有一个问题，在生成图片的时候会面临着生成效率慢的问题，为啥呢？</p>
<figure class="highlight brainfuck"><table><tr><td class="code"><pre><span class="line"><span class="comment">电脑生成图像所需步骤：</span></span><br><span class="line"><span class="comment">RAM</span><span class="literal">--</span>&gt;<span class="comment">CPU</span><span class="literal">--</span>&gt;<span class="comment">RAM</span><span class="literal">--</span>&gt;<span class="comment">I/O</span><span class="literal">--</span>&gt;<span class="comment">GPU</span><span class="literal">--</span>&gt;<span class="comment">SCRN</span></span><br></pre></td></tr></table></figure>

<p>上述程序在运行时，每处理一个像素点，就会将上述流程走一遍，所以会拖慢速度。</p>
<p>假如，我先处理好所有的像素点，再一起输出到GPU，会不会更快呢？</p>
<p>这里，需要用到一个新的类型：BufferedImage，我们先将所有像素点缓存到BufferedImage中，最后一起输出即可</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">BuffedImage</span> <span class="variable">Bfg</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferImage</span>(界面x长度,界面y长度,颜色表示方法);</span><br><span class="line"><span class="comment">//buffered:缓冲的、缓存的</span></span><br></pre></td></tr></table></figure>

<p>完整代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ahc0926.DrawIFS.drawagain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.image.BufferedImage;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DrawIFS</span> <span class="keyword">extends</span> <span class="title class_">JFrame</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> BufferedImage buffer;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DrawIFS</span><span class="params">()</span>&#123;</span><br><span class="line">        setTitle(<span class="string">&quot;IFS&quot;</span>);</span><br><span class="line">        setSize(<span class="number">1000</span>,<span class="number">1000</span>);</span><br><span class="line">        setDefaultCloseOperation(EXIT_ON_CLOSE);</span><br><span class="line">        setResizable(<span class="literal">true</span>);</span><br><span class="line">        setLocationRelativeTo(<span class="literal">null</span>);</span><br><span class="line">        buffer = <span class="keyword">new</span> <span class="title class_">BufferedImage</span>(<span class="number">1000</span>, <span class="number">1000</span>,BufferedImage.TYPE_INT_RGB);</span><br><span class="line">        setVisible(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">paint</span><span class="params">(Graphics g)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>.paint(g);</span><br><span class="line">        draw();</span><br><span class="line">        g.drawImage(buffer,<span class="number">0</span>,<span class="number">0</span>,<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Graphics</span> <span class="variable">g</span> <span class="operator">=</span> buffer.getGraphics();</span><br><span class="line">        <span class="type">double</span> a=-<span class="number">1.7</span>,b=<span class="number">1.3</span>,c=-<span class="number">0.1</span>,d=-<span class="number">1.2</span>;</span><br><span class="line">        <span class="type">double</span> x=<span class="number">0</span>,y=<span class="number">0</span>;</span><br><span class="line">        <span class="type">double</span> tx,ty;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">1000000</span>; i++) &#123;</span><br><span class="line">            tx=Math.sin(a*y)+c*Math.cos(a*x);</span><br><span class="line">            ty=Math.sin(b*x)+d*Math.cos(b*y);</span><br><span class="line">            <span class="type">int</span> px=(<span class="type">int</span>)(tx*<span class="number">200</span>)+<span class="number">500</span>;</span><br><span class="line">            <span class="type">int</span> py=(<span class="type">int</span>)(ty*<span class="number">200</span>)+<span class="number">500</span>;</span><br><span class="line">            g.drawLine(px,py,px,py);</span><br><span class="line">            x=tx;</span><br><span class="line">            y=ty;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">DrawIFS</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="2-几组常量"><a href="#2-几组常量" class="headerlink" title="2.几组常量"></a>2.几组常量</h2><img title="" src="https://i0.imgs.ovh/2023/11/04/ZbsIu.png" alt="" width="427" data-align="center">

<img title="" src="https://i0.imgs.ovh/2023/11/04/ZbEUX.png" alt="" data-align="center" width="230">
]]></content>
      <categories>
        <category>Java项目</category>
      </categories>
      <tags>
        <tag>迭代</tag>
      </tags>
  </entry>
  <entry>
    <title>门格海绵</title>
    <url>/2023/10/30/%E9%97%A8%E6%A0%BC%E6%B5%B7%E7%BB%B5/</url>
    <content><![CDATA[<h2 id="最终效果："><a href="#最终效果：" class="headerlink" title="最终效果："></a>最终效果：</h2><img title="" src="https://i0.imgs.ovh/2023/10/30/AAapI.jpeg" alt="3D谢尔宾斯基地毯" width="295" data-align="center">

<span id="more"></span>

<h2 id="实现思路："><a href="#实现思路：" class="headerlink" title="实现思路："></a>实现思路：</h2><ol>
<li><p>分割为一块一块的正方体去构建，每构建一块正方体，对其进行递归操作，实现“海绵”的效果</p>
</li>
<li><p>对于每一块正方体，通过画三个面实现正方体的展现</p>
</li>
</ol>
<h2 id="代码实现："><a href="#代码实现：" class="headerlink" title="代码实现："></a>代码实现：</h2><ol>
<li>构建每一个正方体</li>
</ol>
<img title="" src="https://i0.imgs.ovh/2023/10/30/AlznN.png" alt="" width="371" data-align="center">

<p>       通过Polygon，添入各个点，实现三个面的颜色填充，使其呈现为一个正方体</p>
<p>       <strong><u>值得注意的是，要沿同一方向（顺&#x2F;逆时针）来加入点，否则会导致填充错误！</u></strong></p>
<ol start="2">
<li><p>随后，对这个正方体构建门格海绵，通过递归来使这个正方体形成海绵的样子</p>
</li>
<li><p>以此类推，从后到前、从下到上的去构建每一个正方体，最后拼接形成一整个门格海绵</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//paint()函数：</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">paint</span><span class="params">(Graphics g)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>.paint(g);</span><br><span class="line">        DrawSponge(<span class="number">300</span>,<span class="number">300</span>,<span class="number">200</span>,<span class="number">200</span>,<span class="number">50</span>,<span class="number">50</span>,g);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Draw3DRect()函数：</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Draw3DRect</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> w,<span class="type">int</span> h,<span class="type">int</span> dx,<span class="type">int</span> dy,Graphics g)</span>&#123;</span><br><span class="line">        Point point1= <span class="keyword">new</span> <span class="title class_">Point</span>(x,y);</span><br><span class="line">        Point point2= <span class="keyword">new</span> <span class="title class_">Point</span>(x+w,y);</span><br><span class="line">        Point point3= <span class="keyword">new</span> <span class="title class_">Point</span>(x+w,y+h);</span><br><span class="line">        Point point4= <span class="keyword">new</span> <span class="title class_">Point</span>(x,y+h);</span><br><span class="line">        Point point5= <span class="keyword">new</span> <span class="title class_">Point</span>(x+dx,y-dy);</span><br><span class="line">        Point point6= <span class="keyword">new</span> <span class="title class_">Point</span>(point2.x+dx, point2.y-dy);</span><br><span class="line">        Point point7= <span class="keyword">new</span> <span class="title class_">Point</span>(point6.x, point6.y+h);</span><br><span class="line"></span><br><span class="line">        <span class="type">Polygon</span> <span class="variable">pl1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Polygon</span>();</span><br><span class="line">        pl1.addPoint(point1.x, point1.y);</span><br><span class="line">        pl1.addPoint(point2.x, point2.y);</span><br><span class="line">        pl1.addPoint(point3.x, point3.y);</span><br><span class="line">        pl1.addPoint(point4.x, point4.y);</span><br><span class="line">        <span class="type">Color</span> <span class="variable">color1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Color</span>(<span class="number">166</span>,<span class="number">157</span>,<span class="number">11</span>);</span><br><span class="line">        g.setColor(color1);</span><br><span class="line">        g.fillPolygon(pl1);</span><br><span class="line"><span class="comment">//                  另两面的构造方法同上~</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//DrawSponge()函数：</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">DrawSponge</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> w,<span class="type">int</span> h,<span class="type">int</span> dx,<span class="type">int</span> dy,Graphics g)</span>&#123;</span><br><span class="line">    Draw3DRect(某一个正方体)</span><br><span class="line">    DrawSponge(同一个正方体)</span><br><span class="line"><span class="comment">//                共有20个正方体按此方法来构造</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="对于DrawSponge-函数："><a href="#对于DrawSponge-函数：" class="headerlink" title="对于DrawSponge()函数："></a>对于DrawSponge()函数：</h3><img title="" src="https://i0.imgs.ovh/2023/10/30/Al1qm.png" alt="" data-align="center" width="192">

<p>    每次构造都从左前下方的正方体开始构造，所以对于某一小正方体进行门格海绵的构造时，要注意起始正方体的坐标</p>
<h2 id="完整代码："><a href="#完整代码：" class="headerlink" title="完整代码："></a>完整代码：</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MSponge</span> <span class="keyword">extends</span> <span class="title class_">JFrame</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MSponge</span><span class="params">()</span>&#123;</span><br><span class="line">        setTitle(<span class="string">&quot;门格海绵&quot;</span>);</span><br><span class="line">        setSize(<span class="number">1000</span>,<span class="number">1000</span>);</span><br><span class="line">        setResizable(<span class="literal">true</span>);</span><br><span class="line">        setLocationRelativeTo(<span class="literal">null</span>);</span><br><span class="line">        setDefaultCloseOperation(EXIT_ON_CLOSE);</span><br><span class="line">        setVisible(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">paint</span><span class="params">(Graphics g)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>.paint(g);</span><br><span class="line">        DrawSponge(<span class="number">500</span>,<span class="number">500</span>,<span class="number">200</span>,<span class="number">200</span>,<span class="number">50</span>,<span class="number">50</span>,g);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Draw3DRect</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> w,<span class="type">int</span> h,<span class="type">int</span> dx,<span class="type">int</span> dy,Graphics g)</span>&#123;</span><br><span class="line">        Point point1= <span class="keyword">new</span> <span class="title class_">Point</span>(x,y);</span><br><span class="line">        Point point2= <span class="keyword">new</span> <span class="title class_">Point</span>(x+w,y);</span><br><span class="line">        Point point3= <span class="keyword">new</span> <span class="title class_">Point</span>(x+w,y+h);</span><br><span class="line">        Point point4= <span class="keyword">new</span> <span class="title class_">Point</span>(x,y+h);</span><br><span class="line">        Point point5= <span class="keyword">new</span> <span class="title class_">Point</span>(x+dx,y-dy);</span><br><span class="line">        Point point6= <span class="keyword">new</span> <span class="title class_">Point</span>(point2.x+dx, point2.y-dy);</span><br><span class="line">        Point point7= <span class="keyword">new</span> <span class="title class_">Point</span>(point6.x, point6.y+h);</span><br><span class="line"></span><br><span class="line">        <span class="type">Polygon</span> <span class="variable">pl1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Polygon</span>();</span><br><span class="line">        pl1.addPoint(point1.x, point1.y);</span><br><span class="line">        pl1.addPoint(point2.x, point2.y);</span><br><span class="line">        pl1.addPoint(point3.x, point3.y);</span><br><span class="line">        pl1.addPoint(point4.x, point4.y);</span><br><span class="line">        <span class="type">Color</span> <span class="variable">color1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Color</span>(<span class="number">217</span>,<span class="number">218</span>,<span class="number">11</span>);</span><br><span class="line">        g.setColor(color1);</span><br><span class="line">        g.fillPolygon(pl1);</span><br><span class="line">        g.setColor(Color.gray);</span><br><span class="line">        g.drawPolygon(pl1);</span><br><span class="line"></span><br><span class="line">        <span class="type">Polygon</span> <span class="variable">pl2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Polygon</span>();</span><br><span class="line">        pl2.addPoint(point1.x, point1.y);</span><br><span class="line">        pl2.addPoint(point5.x, point5.y);</span><br><span class="line">        pl2.addPoint(point6.x, point6.y);</span><br><span class="line">        pl2.addPoint(point2.x, point2.y);</span><br><span class="line">        <span class="type">Color</span> <span class="variable">color2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Color</span>(<span class="number">14</span>,<span class="number">150</span>,<span class="number">4</span>);</span><br><span class="line">        g.setColor(color2);</span><br><span class="line">        g.fillPolygon(pl2);</span><br><span class="line">        g.setColor(Color.gray);</span><br><span class="line">        g.drawPolygon(pl2);</span><br><span class="line"></span><br><span class="line">        <span class="type">Polygon</span> <span class="variable">pl3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Polygon</span>();</span><br><span class="line">        pl3.addPoint(point2.x, point2.y);</span><br><span class="line">        pl3.addPoint(point6.x, point6.y);</span><br><span class="line">        pl3.addPoint(point7.x, point7.y);</span><br><span class="line">        pl3.addPoint(point3.x, point3.y);</span><br><span class="line">        <span class="type">Color</span> <span class="variable">color3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Color</span>(<span class="number">18</span>,<span class="number">49</span>,<span class="number">74</span>);</span><br><span class="line">        g.setColor(color3);</span><br><span class="line">        g.fillPolygon(pl3);</span><br><span class="line">        g.setColor(Color.gray);</span><br><span class="line">        g.drawPolygon(pl3);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">DrawSponge</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> w,<span class="type">int</span> h,<span class="type">int</span> dx,<span class="type">int</span> dy,Graphics g)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(w&lt;<span class="number">10</span>) <span class="keyword">return</span>;</span><br><span class="line">        Draw3DRect(x,y,w,h,dx,dy,g);</span><br><span class="line">        DrawSponge(x+<span class="number">2</span>*dx/<span class="number">3</span>,y-<span class="number">2</span>*dy/<span class="number">3</span>+<span class="number">2</span>*h/<span class="number">3</span>,w/<span class="number">3</span>,h/<span class="number">3</span>,dx/<span class="number">3</span>,dy/<span class="number">3</span>,g);</span><br><span class="line"></span><br><span class="line">        Draw3DRect(x+w,y,w,h,dx,dy,g);</span><br><span class="line">        DrawSponge(x+w+<span class="number">2</span>*dx/<span class="number">3</span>,y-<span class="number">2</span>*dy/<span class="number">3</span>+<span class="number">2</span>*h/<span class="number">3</span>,w/<span class="number">3</span>,h/<span class="number">3</span>,dx/<span class="number">3</span>,dy/<span class="number">3</span>,g);</span><br><span class="line"></span><br><span class="line">        Draw3DRect(x+<span class="number">2</span>*w,y,w,h,dx,dy,g);</span><br><span class="line">        DrawSponge(x+<span class="number">2</span>*w+<span class="number">2</span>*dx/<span class="number">3</span>,y-<span class="number">2</span>*dy/<span class="number">3</span>+<span class="number">2</span>*h/<span class="number">3</span>,w/<span class="number">3</span>,h/<span class="number">3</span>,dx/<span class="number">3</span>,dy/<span class="number">3</span>,g);</span><br><span class="line"></span><br><span class="line">        Draw3DRect(x-dx,y+dy,w,h,dx,dy,g);</span><br><span class="line">        DrawSponge(x+<span class="number">2</span>*dx/<span class="number">3</span>-dx,y-<span class="number">2</span>*dy/<span class="number">3</span>+<span class="number">2</span>*h/<span class="number">3</span>+dy,w/<span class="number">3</span>,h/<span class="number">3</span>,dx/<span class="number">3</span>,dy/<span class="number">3</span>,g);</span><br><span class="line"></span><br><span class="line">        Draw3DRect(x-dx+<span class="number">2</span>*w,y+dy,w,h,dx,dy,g);</span><br><span class="line">        DrawSponge(x+<span class="number">2</span>*w+<span class="number">2</span>*dx/<span class="number">3</span>-dx,y-<span class="number">2</span>*dy/<span class="number">3</span>+<span class="number">2</span>*h/<span class="number">3</span>+dy,w/<span class="number">3</span>,h/<span class="number">3</span>,dx/<span class="number">3</span>,dy/<span class="number">3</span>,g);</span><br><span class="line"></span><br><span class="line">        Draw3DRect(x-<span class="number">2</span>*dx,y+<span class="number">2</span>*dy,w,h,dx,dy,g);</span><br><span class="line">        DrawSponge(x+<span class="number">2</span>*dx/<span class="number">3</span>-<span class="number">2</span>*dx,y-<span class="number">2</span>*dy/<span class="number">3</span>+<span class="number">2</span>*h/<span class="number">3</span>+<span class="number">2</span>*dy,w/<span class="number">3</span>,h/<span class="number">3</span>,dx/<span class="number">3</span>,dy/<span class="number">3</span>,g);</span><br><span class="line"></span><br><span class="line">        Draw3DRect(x-<span class="number">2</span>*dx+w,y+<span class="number">2</span>*dy,w,h,dx,dy,g);</span><br><span class="line">        DrawSponge(x+<span class="number">2</span>*dx/<span class="number">3</span>-<span class="number">2</span>*dx+w,y-<span class="number">2</span>*dy/<span class="number">3</span>+<span class="number">2</span>*h/<span class="number">3</span>+<span class="number">2</span>*dy,w/<span class="number">3</span>,h/<span class="number">3</span>,dx/<span class="number">3</span>,dy/<span class="number">3</span>,g);</span><br><span class="line"></span><br><span class="line">        Draw3DRect(x-<span class="number">2</span>*dx+<span class="number">2</span>*w,y+<span class="number">2</span>*dy,w,h,dx,dy,g);</span><br><span class="line">        DrawSponge(x+<span class="number">2</span>*dx/<span class="number">3</span>-<span class="number">2</span>*dx+<span class="number">2</span>*w,y-<span class="number">2</span>*dy/<span class="number">3</span>+<span class="number">2</span>*h/<span class="number">3</span>+<span class="number">2</span>*dy,w/<span class="number">3</span>,h/<span class="number">3</span>,dx/<span class="number">3</span>,dy/<span class="number">3</span>,g);</span><br><span class="line"><span class="comment">/////////////////////底层构建完成</span></span><br><span class="line">        Draw3DRect(x,y-h,w,h,dx,dy,g);</span><br><span class="line">        DrawSponge(x+<span class="number">2</span>*dx/<span class="number">3</span>,y-<span class="number">2</span>*dy/<span class="number">3</span>+<span class="number">2</span>*h/<span class="number">3</span>-h,w/<span class="number">3</span>,h/<span class="number">3</span>,dx/<span class="number">3</span>,dy/<span class="number">3</span>,g);</span><br><span class="line"></span><br><span class="line">        Draw3DRect(x+<span class="number">2</span>*w,y-h,w,h,dx,dy,g);</span><br><span class="line">        DrawSponge(x+<span class="number">2</span>*w+<span class="number">2</span>*dx/<span class="number">3</span>,y-<span class="number">2</span>*dy/<span class="number">3</span>+<span class="number">2</span>*h/<span class="number">3</span>-h,w/<span class="number">3</span>,h/<span class="number">3</span>,dx/<span class="number">3</span>,dy/<span class="number">3</span>,g);</span><br><span class="line"></span><br><span class="line">        Draw3DRect(x-<span class="number">2</span>*dx,y+<span class="number">2</span>*dy-h,w,h,dx,dy,g);</span><br><span class="line">        DrawSponge(x+<span class="number">2</span>*dx/<span class="number">3</span>-<span class="number">2</span>*dx,y-<span class="number">2</span>*dy/<span class="number">3</span>+<span class="number">2</span>*h/<span class="number">3</span>+<span class="number">2</span>*dy-h,w/<span class="number">3</span>,h/<span class="number">3</span>,dx/<span class="number">3</span>,dy/<span class="number">3</span>,g);</span><br><span class="line"></span><br><span class="line">        Draw3DRect(x-<span class="number">2</span>*dx+<span class="number">2</span>*w,y+<span class="number">2</span>*dy-h,w,h,dx,dy,g);</span><br><span class="line">        DrawSponge(x+<span class="number">2</span>*dx/<span class="number">3</span>-<span class="number">2</span>*dx+<span class="number">2</span>*w,y-<span class="number">2</span>*dy/<span class="number">3</span>+<span class="number">2</span>*h/<span class="number">3</span>+<span class="number">2</span>*dy-h,w/<span class="number">3</span>,h/<span class="number">3</span>,dx/<span class="number">3</span>,dy/<span class="number">3</span>,g);</span><br><span class="line"><span class="comment">///////////////////////中层构建完成</span></span><br><span class="line">        Draw3DRect(x,y-<span class="number">2</span>*h,w,h,dx,dy,g);</span><br><span class="line">        DrawSponge(x+<span class="number">2</span>*dx/<span class="number">3</span>,y-<span class="number">2</span>*dy/<span class="number">3</span>+<span class="number">2</span>*h/<span class="number">3</span>-<span class="number">2</span>*h,w/<span class="number">3</span>,h/<span class="number">3</span>,dx/<span class="number">3</span>,dy/<span class="number">3</span>,g);</span><br><span class="line"></span><br><span class="line">        Draw3DRect(x+w,y-<span class="number">2</span>*h,w,h,dx,dy,g);</span><br><span class="line">        DrawSponge(x+w+<span class="number">2</span>*dx/<span class="number">3</span>,y-<span class="number">2</span>*dy/<span class="number">3</span>+<span class="number">2</span>*h/<span class="number">3</span>-<span class="number">2</span>*h,w/<span class="number">3</span>,h/<span class="number">3</span>,dx/<span class="number">3</span>,dy/<span class="number">3</span>,g);</span><br><span class="line"></span><br><span class="line">        Draw3DRect(x+<span class="number">2</span>*w,y-<span class="number">2</span>*h,w,h,dx,dy,g);</span><br><span class="line">        DrawSponge(x+<span class="number">2</span>*w+<span class="number">2</span>*dx/<span class="number">3</span>,y-<span class="number">2</span>*dy/<span class="number">3</span>+<span class="number">2</span>*h/<span class="number">3</span>-<span class="number">2</span>*h,w/<span class="number">3</span>,h/<span class="number">3</span>,dx/<span class="number">3</span>,dy/<span class="number">3</span>,g);</span><br><span class="line"></span><br><span class="line">        Draw3DRect(x-dx,y+dy-<span class="number">2</span>*h,w,h,dx,dy,g);</span><br><span class="line">        DrawSponge(x+<span class="number">2</span>*dx/<span class="number">3</span>-dy,y-<span class="number">2</span>*dy/<span class="number">3</span>+<span class="number">2</span>*h/<span class="number">3</span>-<span class="number">2</span>*h+dy,w/<span class="number">3</span>,h/<span class="number">3</span>,dx/<span class="number">3</span>,dy/<span class="number">3</span>,g);</span><br><span class="line"></span><br><span class="line">        Draw3DRect(x-dx+<span class="number">2</span>*w,y+dy-<span class="number">2</span>*h,w,h,dx,dy,g);</span><br><span class="line">        DrawSponge(x+<span class="number">2</span>*w+<span class="number">2</span>*dx/<span class="number">3</span>-dx,y-<span class="number">2</span>*dy/<span class="number">3</span>+<span class="number">2</span>*h/<span class="number">3</span>-<span class="number">2</span>*h+dy,w/<span class="number">3</span>,h/<span class="number">3</span>,dx/<span class="number">3</span>,dy/<span class="number">3</span>,g);</span><br><span class="line"></span><br><span class="line">        Draw3DRect(x-<span class="number">2</span>*dx,y+<span class="number">2</span>*dy-<span class="number">2</span>*h,w,h,dx,dy,g);</span><br><span class="line">        DrawSponge(x+<span class="number">2</span>*dx/<span class="number">3</span>-<span class="number">2</span>*dx,y-<span class="number">2</span>*dy/<span class="number">3</span>+<span class="number">2</span>*h/<span class="number">3</span>+<span class="number">2</span>*dy-<span class="number">2</span>*h,w/<span class="number">3</span>,h/<span class="number">3</span>,dx/<span class="number">3</span>,dy/<span class="number">3</span>,g);</span><br><span class="line"></span><br><span class="line">        Draw3DRect(x-<span class="number">2</span>*dx+w,y+<span class="number">2</span>*dy-<span class="number">2</span>*h,w,h,dx,dy,g);</span><br><span class="line">        DrawSponge(x+<span class="number">2</span>*dx/<span class="number">3</span>-<span class="number">2</span>*dx+w,y-<span class="number">2</span>*dy/<span class="number">3</span>+<span class="number">2</span>*h/<span class="number">3</span>+<span class="number">2</span>*dy-<span class="number">2</span>*h,w/<span class="number">3</span>,h/<span class="number">3</span>,dx/<span class="number">3</span>,dy/<span class="number">3</span>,g);</span><br><span class="line"></span><br><span class="line">        Draw3DRect(x-<span class="number">2</span>*dx+<span class="number">2</span>*w,y+<span class="number">2</span>*dy-<span class="number">2</span>*h,w,h,dx,dy,g);</span><br><span class="line">        DrawSponge(x+<span class="number">2</span>*dx/<span class="number">3</span>-<span class="number">2</span>*dx+<span class="number">2</span>*w,y-<span class="number">2</span>*dy/<span class="number">3</span>+<span class="number">2</span>*h/<span class="number">3</span>+<span class="number">2</span>*dy-<span class="number">2</span>*h,w/<span class="number">3</span>,h/<span class="number">3</span>,dx/<span class="number">3</span>,dy/<span class="number">3</span>,g);</span><br><span class="line"><span class="comment">/////////////////////上层构建完成</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">MSponge</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="成品："><a href="#成品：" class="headerlink" title="成品："></a>成品：</h2><img title="" src="https://i0.imgs.ovh/2023/10/30/AlUoR.png" alt="成品" data-align="center" width="424">
]]></content>
      <categories>
        <category>Java项目</category>
      </categories>
      <tags>
        <tag>递归</tag>
        <tag>可视化</tag>
      </tags>
  </entry>
  <entry>
    <title>谢尔宾斯基地毯</title>
    <url>/2023/10/29/%E8%B0%A2%E5%B0%94%E5%AE%BE%E6%96%AF%E5%9F%BA%E5%9C%B0%E6%AF%AF/</url>
    <content><![CDATA[<p>先看成品：</p>
<img src="https://i0.imgs.ovh/2023/10/29/AX64d.png" title="" alt="谢尔宾斯基地毯" width="202">

<span id="more"></span>

<h3 id="实现思路：迭代递归"><a href="#实现思路：迭代递归" class="headerlink" title="实现思路：迭代递归"></a>实现思路：迭代递归</h3><ul>
<li>以画整张地毯的思路画某一块地毯，<strong>注意终止条件</strong></li>
</ul>
<p>需要的函数：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">fillRect(x,y,w,h);<span class="comment">//矩形左上角坐标+宽、高 </span></span><br></pre></td></tr></table></figure>

<h1 id="前置知识："><a href="#前置知识：" class="headerlink" title="前置知识："></a>前置知识：</h1><ol>
<li>继承</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> DrawCarpet <span class="keyword">extends</span> <span class="title class_">JFrame</span></span><br><span class="line"><span class="comment">//这里的意思是：</span></span><br><span class="line"><span class="comment">//DrawCarpet类继承了JFrame，于是在DrawCarpet类中可以直接调用JFrame的所有方法</span></span><br><span class="line"><span class="comment">//（DrawCarpet是JFrame的子类）</span></span><br></pre></td></tr></table></figure>

<p>   2.构造函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> DrawCarpet <span class="keyword">extends</span> <span class="title class_">Jframe</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DrawCarpet</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//与类同名的函数不声明类型，这样在调用DrawCarpet类时会自动执行DrawCarpet()函数中的指令</span></span><br></pre></td></tr></table></figure>

<p>   3.重构</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">paint</span><span class="params">(Graphics g)</span>&#123;</span><br><span class="line">    <span class="built_in">super</span>.paint(g);</span><br><span class="line">    DrawCarpet();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//@Override用来声明我们要自己重写java中自带的paint()函数，</span></span><br><span class="line"><span class="comment">//而super.paint(g)的意思是继承原本paint()函数中的所有方法</span></span><br></pre></td></tr></table></figure>

<h1 id="代码实现："><a href="#代码实现：" class="headerlink" title="代码实现："></a>代码实现：</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Scarpet</span> <span class="keyword">extends</span> <span class="title class_">JFrame</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Scarpet</span><span class="params">()</span>&#123;</span><br><span class="line">        setTitle(<span class="string">&quot;谢尔宾斯基地毯&quot;</span>);</span><br><span class="line">        setSize(<span class="number">800</span>,<span class="number">800</span>);</span><br><span class="line">        setResizable(<span class="literal">true</span>);</span><br><span class="line">        setDefaultCloseOperation(EXIT_ON_CLOSE);</span><br><span class="line">        setLocationRelativeTo(<span class="literal">null</span>);</span><br><span class="line">        setVisible(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">paint</span><span class="params">(Graphics g)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.paint(g);</span><br><span class="line">        draw(<span class="number">150</span>,<span class="number">150</span>,<span class="number">500</span>,<span class="number">500</span>,g);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> w,<span class="type">int</span> h,Graphics g)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(w&lt;<span class="number">3</span>) <span class="keyword">return</span> ;</span><br><span class="line">        g.fillRect(x+w/<span class="number">3</span>,y+h/<span class="number">3</span>,w/<span class="number">3</span>,h/<span class="number">3</span>);</span><br><span class="line">        draw(x,y,w/<span class="number">3</span>,h/<span class="number">3</span>,g);</span><br><span class="line">        draw(x+w/<span class="number">3</span>,y,w/<span class="number">3</span>,h/<span class="number">3</span>,g);</span><br><span class="line">        draw(x+<span class="number">2</span>*w/<span class="number">3</span>,y,w/<span class="number">3</span>,h/<span class="number">3</span>,g);</span><br><span class="line">        draw(x,y+h/<span class="number">3</span>,w/<span class="number">3</span>,h/<span class="number">3</span>,g);</span><br><span class="line">        draw(x+<span class="number">2</span>*w/<span class="number">3</span>,y+h/<span class="number">3</span>,w/<span class="number">3</span>,h/<span class="number">3</span>,g);</span><br><span class="line">        draw(x,y+<span class="number">2</span>*h/<span class="number">3</span>,w/<span class="number">3</span>,h/<span class="number">3</span>,g);</span><br><span class="line">        draw(x+w/<span class="number">3</span>,y+<span class="number">2</span>*h/<span class="number">3</span>,w/<span class="number">3</span>,h/<span class="number">3</span>,g);</span><br><span class="line">        draw(x+<span class="number">2</span>*w/<span class="number">3</span>,y+<span class="number">2</span>*h/<span class="number">3</span>,w/<span class="number">3</span>,h/<span class="number">3</span>,g);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Scarpet</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过Java，我们得以可视化递归的过程，显现递归之美。</p>
]]></content>
      <categories>
        <category>Java项目</category>
      </categories>
      <tags>
        <tag>递归</tag>
        <tag>可视化</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo基本用法</title>
    <url>/2023/10/29/hexo%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/</url>
    <content><![CDATA[<span id="more"></span>

<!--more-->

<h2 id=""><a href="#" class="headerlink" title=""></a><!---more---></h2><h1 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h1><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
</search>
